//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input System/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""cfbc2161-1fb0-4132-bfb5-443956fe514e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7f2234ac-0b39-4f9e-a824-dc642f0fed0d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""42973ef1-1f63-490d-8c5b-87dfaf730b46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMouseAction"",
                    ""type"": ""Button"",
                    ""id"": ""f71df752-7cc3-40f3-9d24-967825d70eb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMouseAction"",
                    ""type"": ""Button"",
                    ""id"": ""a6a5d898-99f3-44e3-af49-fba067ac025c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QAction1"",
                    ""type"": ""Button"",
                    ""id"": ""100d45d0-7b27-4d7f-9fcd-b5f5063e3c86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EAction2"",
                    ""type"": ""Button"",
                    ""id"": ""98a9519d-c656-410c-8ef4-998408fa2539"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FAction3"",
                    ""type"": ""Button"",
                    ""id"": ""043b42ac-afda-452d-a5cf-f95a514994cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a6503194-9901-4f47-a305-d99827907b8f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4997c7f6-82bd-4b7a-9f56-653589da0312"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""958083a6-65d3-4d0d-be0f-7991b506565a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0934d417-a447-47a6-958f-0dd2765ecbb1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""17bcb71b-c55e-40d6-8e33-bc2b4fea4e26"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""9aeda14a-d17a-48ee-a1e0-6a4f94fbfe3a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b00f381c-e86b-4665-9127-c955fd96698a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""102b044a-59a2-40bd-bfbd-34e40fa90fff"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""06647398-c48e-4a8e-af91-97353919565e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""edab74d7-dfa0-4baa-938b-ec449ab243b2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b4da2665-194f-41f8-872c-f526dcbb86cf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c8e5212-e207-4fee-bdb4-281ff3a522f4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""LeftMouseAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0ed6106-931e-4980-9204-78eb98e01270"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""RightMouseAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf6d8121-3c71-44da-a676-ceb39dd7d84a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""QAction1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55affdd8-69b8-409a-a624-253002afee41"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""EAction2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8472ee25-6143-435c-af87-d8df119222c1"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""FAction3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and mouse"",
            ""bindingGroup"": ""Keyboard and mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_LeftMouseAction = m_Player.FindAction("LeftMouseAction", throwIfNotFound: true);
        m_Player_RightMouseAction = m_Player.FindAction("RightMouseAction", throwIfNotFound: true);
        m_Player_QAction1 = m_Player.FindAction("QAction1", throwIfNotFound: true);
        m_Player_EAction2 = m_Player.FindAction("EAction2", throwIfNotFound: true);
        m_Player_FAction3 = m_Player.FindAction("FAction3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_LeftMouseAction;
    private readonly InputAction m_Player_RightMouseAction;
    private readonly InputAction m_Player_QAction1;
    private readonly InputAction m_Player_EAction2;
    private readonly InputAction m_Player_FAction3;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @LeftMouseAction => m_Wrapper.m_Player_LeftMouseAction;
        public InputAction @RightMouseAction => m_Wrapper.m_Player_RightMouseAction;
        public InputAction @QAction1 => m_Wrapper.m_Player_QAction1;
        public InputAction @EAction2 => m_Wrapper.m_Player_EAction2;
        public InputAction @FAction3 => m_Wrapper.m_Player_FAction3;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @LeftMouseAction.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftMouseAction;
                @LeftMouseAction.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftMouseAction;
                @LeftMouseAction.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftMouseAction;
                @RightMouseAction.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightMouseAction;
                @RightMouseAction.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightMouseAction;
                @RightMouseAction.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightMouseAction;
                @QAction1.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQAction1;
                @QAction1.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQAction1;
                @QAction1.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQAction1;
                @EAction2.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEAction2;
                @EAction2.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEAction2;
                @EAction2.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEAction2;
                @FAction3.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFAction3;
                @FAction3.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFAction3;
                @FAction3.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFAction3;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @LeftMouseAction.started += instance.OnLeftMouseAction;
                @LeftMouseAction.performed += instance.OnLeftMouseAction;
                @LeftMouseAction.canceled += instance.OnLeftMouseAction;
                @RightMouseAction.started += instance.OnRightMouseAction;
                @RightMouseAction.performed += instance.OnRightMouseAction;
                @RightMouseAction.canceled += instance.OnRightMouseAction;
                @QAction1.started += instance.OnQAction1;
                @QAction1.performed += instance.OnQAction1;
                @QAction1.canceled += instance.OnQAction1;
                @EAction2.started += instance.OnEAction2;
                @EAction2.performed += instance.OnEAction2;
                @EAction2.canceled += instance.OnEAction2;
                @FAction3.started += instance.OnFAction3;
                @FAction3.performed += instance.OnFAction3;
                @FAction3.canceled += instance.OnFAction3;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardandmouseSchemeIndex = -1;
    public InputControlScheme KeyboardandmouseScheme
    {
        get
        {
            if (m_KeyboardandmouseSchemeIndex == -1) m_KeyboardandmouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and mouse");
            return asset.controlSchemes[m_KeyboardandmouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLeftMouseAction(InputAction.CallbackContext context);
        void OnRightMouseAction(InputAction.CallbackContext context);
        void OnQAction1(InputAction.CallbackContext context);
        void OnEAction2(InputAction.CallbackContext context);
        void OnFAction3(InputAction.CallbackContext context);
    }
}
